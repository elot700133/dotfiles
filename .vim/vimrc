"------------------------------------------------------------------------------
" General
"------------------------------------------------------------------------------
set nocp

" pathogen
call pathogen#infect()
"call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

filetype plugin on
filetype indent on

" encoding
set encoding=utf-8
set fileencodings=utf-8

" auto reload
set autoread

syntax enable

" show line number
set relativenumber
set number
set path+=**
" set textwidth=79

" Allows switching modified buffers
"set modifiable

set history=1000
set undolevels=1000

set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

"------------------------------------------------------------------------------
" Color
"------------------------------------------------------------------------------
if has("gui_running")
  colorscheme solarized
  set background=dark
  "set background=light

  " gvim - display tab as [Num]Filename+Modified status
  set guitablabel=\[%N\]\ %t\ %M
elseif &diff
  colorscheme elflordmod
  syntax off
else
  "colorscheme darkblue
  colorscheme elflordmod
  "set background=dark
  "set background=light
endif

" Paint a color vertical line at column
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/
"set colorcolumn=80
"------------------------------------------------------------------------------
" Interface
"------------------------------------------------------------------------------
" set a different mapleader instead of \
let mapleader = ","
set wildmenu
set wildmode=list:longest,full
set wildignore+=*.o,*~,*.so,*.swp,*.zip,.git,*/doxygen/*

" always show cursor position
set ruler

set cmdheight=1

" searching
set ignorecase 
set smartcase
set hlsearch
set incsearch
set showmatch
set mat=5
set lazyredraw

" turn off sound on error
set noerrorbells
set novisualbell

" ctags
" ctrl + \ to tab window definition
"map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR> 
" alt + \ to vertical split definition
map <Leader>d :exec("tag ".expand("<cword>"))<CR>
map <Leader>dd :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
map <Leader>ddd :tab split<CR>:exec("tag ".expand("<cword>"))<CR>

set noswapfile

"------------------------------------------------------------------------------
" map bindings, autocmd
"------------------------------------------------------------------------------
set pastetoggle=<F2>  "paste mode
map <F3> :Dispatch :execute "vimgrep /" . expand("<cword>") . "/ **/*.cpp **/*.hpp **/*.c **/*.h" <Bar> cw 
map <F4> :TagbarToggle<CR>
"map <F4> :TlistToggle<CR>
map <F5> :VSTreeExplore<CR>
"map <F7> :make -s -C
map <F7> :Dispatch make -s -j`nproc` -C
map <F12> :Dispatch ctags -R --exclude='build' --exclude='.git' --exclude='.svn' --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>
map <leader>s :mks! default.vimsession<CR>
map <leader>l :source default.vimsession<CR>

if has('autocmd')
autocmd FileType c,cpp autocmd BufWritePre <buffer> :let _s=@/|:let _ccol=col('.')|:let _crow=line('.')|:%s/\s\+$//e|:let @/=_s|:nohl|:call cursor(_crow,_ccol)
endif

"------------------------------------------------------------------------------
" Windows
"------------------------------------------------------------------------------
" move focus (vim-tmux-navigator is providing this capability)
"map <C-j> <C-W>j
"map <C-k> <C-W>k
"map <C-h> <C-W>h
"map <C-l> <C-W>l

" split defaults
set splitbelow
set splitright

" resize windows
"map + <C-W>+
"map - <C-W>-
map <UP> :resize +3<CR>
map <DOWN> :resize -3<CR>
map <RIGHT> :vertical resize +3<CR>
map <LEFT> :vertical resize -3<CR>

"map [A :resize +3<CR>
"map [B :resize -3<CR>
"map [C :vertical resize +3<CR>
"map [D :vertical resize -3<CR>

"map <silent> k :resize +3<CR>
"map <silent> j :resize -3<CR>
"map <silent> l :vertical resize +3<CR>
"map <silent> h :vertical resize -3<CR>

"map [A :resize +3<CR>
"map [B :resize -3<CR>
"map [C :vertical resize +3<CR>
"map [D :vertical resize -3<CR>
if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" tab
" ctrl+shift+H or L
map ` gt<CR>
map 1 1gt<CR>
map 2 2gt<CR>
map 3 3gt<CR>
map 4 4gt<CR>
map 5 5gt<CR>
map 6 6gt<CR>
map 7 7gt<CR>
map 8 8gt<CR>
map 9 9gt<CR>

" recusively look for tags until reaching home dir
set tags+=~/.vim/tags/cpp,./tags,~

" use spaces instead tab
set expandtab
set smarttab
set shiftwidth=2 " tab = 2 spaces
set autoindent "Auto indent
set smartindent "Smart indent
"set wrap "Wrap lines
set nowrap "no wrapping text

set foldmethod=syntax
set foldcolumn=2
set foldlevel=20

"------------------------------------------------------------------------------
" CtrlP
"------------------------------------------------------------------------------
let g:ctrlp_map = '<c-p>' 
let g:ctrlp_cmd = 'CtrlP' 

let g:ctrlp_use_caching = 1
let g:ctrlp_show_hidden = 1

"don't change directory in ctrlp
let g:ctrlp_working_path_mode = '0'

"follow symlinks
let g:ctrlp_follow_symlinks = 1

"ignore following symlinks
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](build|\.git|\.hg|\.svn)$',
  \ 'file': '\v.(exe|so|dll)$',
  \}
"------------------------------------------------------------------------------
" NERDTree 
"------------------------------------------------------------------------------


"------------------------------------------------------------------------------
" OmniCppComplete
"------------------------------------------------------------------------------
let OmniCpp_NamespaceSearch = 0
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone

"------------------------------------------------------------------------------
" easymotion
"------------------------------------------------------------------------------
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

"------------------------------------------------------------------------------
" taglist
"------------------------------------------------------------------------------

"------------------------------------------------------------------------------
" tagbar
"------------------------------------------------------------------------------

"------------------------------------------------------------------------------
" VTreeExplore
"------------------------------------------------------------------------------

let treeExplVertical = 0 " 
let treeExplWinSize = 35 " menu window size
let treeExplDirSort = 1 " dir sort first
let treeExplHidden = 1 " show hidden files

"------------------------------------------------------------------------------
" clang_complete
"------------------------------------------------------------------------------

let g:clang_use_library=1
let g:clang_complete_auto=0 "use C-x C-o instead"
let g:clang_user_options='-std=c++11 -pthread'
let g:clang_format_path="/home/tpleeto1/tools/llvm/build/bin/clang-format"

"------------------------------------------------------------------------------
" arpeggio
"------------------------------------------------------------------------------

call arpeggio#map('i', '', 0, 'jk', '<Esc>')

"------------------------------------------------------------------------------
" DirDiff
"------------------------------------------------------------------------------

let g:DirDiffExcludes = ".git,.*.swp"

"------------------------------------------------------------------------------
" tmux support
"------------------------------------------------------------------------------
if &term =~ '^screen'
  " tmux will send xterm-style keys when its xterm-keys option is on
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif"

"------------------------------------------------------------------------------
" doxygen tool kit
"------------------------------------------------------------------------------
let g:DoxygenToolkit_commentType = "C++"
let g:DoxygenToolkit_authorName = "Too Lee"

"------------------------------------------------------------------------------
" source custom vimrc to an account
"------------------------------------------------------------------------------
if filereadable(expand("~/.vimrc_custom"))
  source ~/.vimrc_custom
endif

"------------------------------------------------------------------------------
" source local vimrc to a folder
"------------------------------------------------------------------------------
if filereadable(".vimrc_local")
  source .vimrc_local
endif

"------------------------------------------------------------------------------
" how to
"------------------------------------------------------------------------------

" build within vim 
" :make
"
" Jump to the error
" :copen   
"
" display keystrokes
" Ctrl + v + <keystrokes>
"
" write with sudo
":w !sudo tee %
"
" delete stuff inside quotes or parenthesis
" di"
" di(
" di{
"
" execute command inside vim
" :.!ls
"
" hex reader
" :!xxd
" :!xxd -r        " to revert background
"
" change list
" g; "go back thru change list
" g, "go forward thru change list
"
" show command history
" q:
"
" bookmark
" m<letter> " to create a bookmark name 'a' (can use a-z)
" `<letter> " back tick 'a' go to that bookmark
"
" record a macro command
" q<letter><command>q  " record a macro
" @<letter>            " execute the macro
" @@                   " execute the macro again
"
" multiple files find and replace
" :arg *.cpp 
" :argdo s/old/new/ge | updated
"
" Massive find in tmux+vim
" :Dispatch ack <word> --cpp
"
" Search and Replace
" :%s/string1/string2/gnc
