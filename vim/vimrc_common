"------------------------------------------------------------------------------
" General
"------------------------------------------------------------------------------
set nocp

" pathogen
call pathogen#infect()
"call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

filetype plugin on
filetype indent on

" encoding
set encoding=utf-8
set fileencodings=utf-8

" auto reload
set autoread

syntax enable

" show line number
set number
set path+=**
" set textwidth=79

" Allows switching modified buffers
"set modifiable

"------------------------------------------------------------------------------
" Color
"------------------------------------------------------------------------------
colorscheme darkblue
"set background=dark
"set background=light

"------------------------------------------------------------------------------
" Interface
"------------------------------------------------------------------------------
set wildmenu
set wildmode=list:longest,full
set wildignore+=*.o,*~,*.so,*.swp,*.zip,.git,*/doxygen/*

" always show cursor position
set ruler

set cmdheight=1

" searching
set ignorecase 
set smartcase
set hlsearch
set incsearch
set showmatch
set mat=5
set lazyredraw

" turn off sound on error
set noerrorbells
set novisualbell

map <F1> :help

" ctags
" ctrl + \ to tab window definition
"map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR> 
" alt + \ to vertical split definition
" map <F3> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
map <F3> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>

set pastetoggle=<F4>  "paste mode

map <F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>


"------------------------------------------------------------------------------
" Windows
"------------------------------------------------------------------------------
" move focus
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
" split defaults
set splitbelow
set splitright

" resize windows
"map + <C-W>+
"map - <C-W>-
map <silent> <UP> :resize +3<CR>
map <silent> <DOWN> :resize -3<CR>
map <silent> <RIGHT> :vertical resize +3<CR>
map <silent> <LEFT> :vertical resize -3<CR>

" tab
" gvim - display tab as [Num]Filename+Modified status 
set guitablabel=\[%N\]\ %t\ %M 
" ctrl+shift+H or L
map ` gt<CR>
map 1 1gt<CR>
map 2 2gt<CR>
map 3 3gt<CR>
map 4 4gt<CR>
map 5 5gt<CR>
map 6 6gt<CR>
map 7 7gt<CR>
map 8 8gt<CR>
map 9 9gt<CR>

" recusively look for tags until reaching home dir
set tags+=~/.vim/tags/cpp,./tags,~

" use spaces instead tab
set expandtab
set smarttab
set shiftwidth=2 " tab = 2 spaces
set autoindent "Auto indent
set smartindent "Smart indent
"set wrap "Wrap lines
set nowrap "no wrapping text

"------------------------------------------------------------------------------
" CtrlP
"------------------------------------------------------------------------------
let g:ctrlp_map = '<c-p>' 
let g:ctrlp_cmd = 'CtrlP' 

"------------------------------------------------------------------------------
" NERDTree 
"------------------------------------------------------------------------------
" map <F5> :VSTreeExplore<CR>

"------------------------------------------------------------------------------
" make 
"------------------------------------------------------------------------------
map <F7> :make -s -C

"------------------------------------------------------------------------------
" OmniCppComplete
"------------------------------------------------------------------------------
let OmniCpp_NamespaceSearch = 0
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone

"------------------------------------------------------------------------------
" easymotion
"------------------------------------------------------------------------------
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

"------------------------------------------------------------------------------
" taglist
"------------------------------------------------------------------------------

map <F4> :TlistToggle<CR>

"------------------------------------------------------------------------------
" VTreeExplore
"------------------------------------------------------------------------------

map <F5> :VSTreeExplore<CR>
let treeExplVertical = 0 " 
let treeExplWinSize = 35 " menu window size
let treeExplDirSort = 1 " dir sort first

"------------------------------------------------------------------------------
" how to
"------------------------------------------------------------------------------

" build within vim 
" :make
"
" Jump to the error
" :copen   
"
" display keystrokes
" Ctrl + v + <keystrokes>
"
" write with sudo
":w !sudo tee %
"
" delete stuff inside quotes or parenthesis
" di"
" di(
" di{
"
" execute command inside vim
" :.!ls
"
" hex reader
" :!xxd
" :!xxd -r        " to revert background
"
" change list
" g; "go back thru change list
" g, "go forward thru change list
"
" show command history
" q:
"
" bookmark
" m<letter> " to create a bookmark name 'a' (can use a-z)
" `<letter> " back tick 'a' go to that bookmark
"
" record a macro command
" q<letter><command>q  " record a macro
" @<letter>            " execute the macro
" @@                   " execute the macro again
"
" multiple files find and replace
" :arg *.cpp 
" :argdo s/old/new/ge | updated
"
" Massive find in tmux+vim
" :Dispatch ack <word> --cpp
